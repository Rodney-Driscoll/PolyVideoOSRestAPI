/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	Mission Electronics Inc.
System Name:	
System Number:
Programmer:		Andy Ross
Comments:		Interface with a Poly Video OS device ( G7500, X50, X30 ).
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #CATEGORY "" 
#PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

#DEFINE_CONSTANT TIMER_TIMEOUT 1000


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #INCLUDEPATH
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""
// #CRESTRON_SIMPLSHARP_LIBRARY ""
#USER_SIMPLSHARP_LIBRARY "PolyVideoOSRestAPI"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT 	Debug,
				Connect, Disconnect, 
				_SKIP_,
				_SKIP_,
				StartDeviceMode, StopDeviceMode;

ANALOG_INPUT 	_SKIP_,
				PollingTimeInMs,
				_SKIP_;

STRING_INPUT 	_SKIP_,
				Username$[255], Password$[255], HostnameOrIPAddress$[255];
// BUFFER_INPUT 

DIGITAL_OUTPUT 	_SKIP_,
				Connecting_Fb,
				Connected_Fb,
				Error_Fb,
				DeviceModeStarting_Fb,
				DeviceModeEnabled_Fb;
// ANALOG_OUTPUT 
STRING_OUTPUT  	_SKIP_,
				_SKIP_,
				_SKIP_,
				_SKIP_,
				_SKIP_,
				Message_Fb$,
				DeviceModeStatus_Fb$;

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING
PolyVideoOSDevice videoOSDevice;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function UpdateDeviceModeStatus( )
{ 
		DeviceModeStarting_Fb = OFF;

     	if( DeviceModeEnabled_Fb = ON )
			DeviceModeStatus_Fb$ = "Started";
		else
			DeviceModeStatus_Fb$ = "Stopped";
}

Function StartDeviceModeTimer( )
{
 	DeviceModeStatus_Fb$ = "Connecting...";
	DeviceModeStarting_Fb = ON;

	WAIT( TIMER_TIMEOUT, DEVICE_MODE_WAIT_TIMER )
	{
		UpdateDeviceModeStatus( );
	}
}

Function StopDeviceModeTimer( )
{
 	CancelWait( DEVICE_MODE_WAIT_TIMER );
	UpdateDeviceModeStatus( ); 
}

Function ClearOutputForLogout( )
{
	DeviceModeEnabled_Fb = OFF;
}

/*******************************************************************************************
  SIMPL# Event Callbacks
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
                                               

// session state changed. Login, Logout events
EventHandler OnSessionStateChangedCallback( PolyVideoOSDevice device, SessionStateChangedEventArgs ea  )
{
	Connected_Fb = ea.UConnected;
	Message_Fb$ = ea.StringState;

	if( Connected_Fb = OFF )
	{
		ClearOutputForLogout();
    }

}
 
// device mode changed. USB mode on or off. 
EventHandler OnDeviceModeChangedCallback( PolyVideoOSDevice device, UShortChangeEventArgs ea  )
{
	//Print( "\nDevice Mode = %d", ea.Value );
	DeviceModeEnabled_Fb = ea.Value;
	UpdateDeviceModeStatus();
}

// events without a specific response
EventHandler OnGenericUShortStateChangedCallback( PolyVideoOSDevice device, UShortChangeEventArgs ea  )
{
	Print( "Generic State Changed UShort = %d", ea.Value );
}

// events without a specific response
EventHandler OnGenericStringStateChangedCallback( PolyVideoOSDevice device, StringChangeEventArgs ea  )
{
	Print( "Generic State Changed String = %s", ea.Value );
}

EventHandler OnErrorStateChangedCallback( PolyVideoOSDevice device, ErrorChangeEventArgs ea )
{
	Error_Fb = ea.UShortIsError;
	Message_Fb$ = ea.Value;
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH Debug
{
		videoOSDevice.DebugState = 1;
}
 
RELEASE Debug
{
		videoOSDevice.DebugState = 0;
}

PUSH Connect
{
	try
	{
		videoOSDevice.Connect();
	}
	catch
	{
		Print( "Error Connecting to Video OS Device" );
		Print( "Exception = %s", GetExceptionMessage( ) );	
	}
}

PUSH Disconnect
{
 	videoOSDevice.Disconnect();
}
 
PUSH StartDeviceMode
{
	StartDeviceModeTimer( );
	videoOSDevice.StartDeviceMode( );
}

PUSH StopDeviceMode
{
	StopDeviceModeTimer( );
	videoOSDevice.StopDeviceMode( );
}

CHANGE Username$
{
 	videoOsDevice.Username = Username$;
}

CHANGE Password$
{
	videoOSDevice.Password = Password$;
}

CHANGE HostnameOrIPAddress$
{
 	videoOSDevice.HostNameOrIPAddress = HostnameOrIPAddress$;
}

CHANGE PollingTimeInMs
{
	videoOSDevice.PollingTime = PollingTimeInMs;
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

	RegisterEvent( videoOSDevice, OnSessionStateChanged, OnSessionStateChangedCallback );
	RegisterEvent( videoOSDevice, OnDevideModeChanged, OnDeviceModeChangedCallback );
	RegisterEvent( videoOSDevice, OnErrorStateChanged, OnErrorStateChangedCallback );

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}


